############################################################
# My Personal Git Configuration -- `git config --global -e`
# Wil Moore III <wil.moore@wilmoore.com>
#
# Always up-to-date @:
# - http://git.io/gopyOg (https://gist.github.com/4179015)
#
# For further inspiration, see:
# - http://git.io/kELRRA
# - https://github.com/visionmedia/git-extras
# - https://github.com/mhartl/git-utils
############################################################

[user]
  name              = Wil Moore III

  email             = wil.moore@wilmoore.com

[credential]
  # https://help.github.com/articles/set-up-git#password-caching
  helper            = osxkeychain

[github]
  user              = wilmoore

[core]
  bare              = false

  # use vim as preferred editor and start editing at first line when invoked
  editor            = vim -pc ':normal gg'

  excludesfile      = ~/.gitignore

  filemode          = true

  ignorecase        = false

  logallrefupdates  = true

  quotepath         = false

  # Use "less" as the pager...this will provide nice colors
  pager             = less -R

  # Whitespace problems git should recognize
  # (1) EOL whitespace
  # (2) mixed spaces and tabs
  whitespace        = trailing-space,space-before-tab

[help]
  # wait .5 seconds before autocorrecting
  autocorrect       = 5

[grep]
  # show line numbers in grep results
  lineNumber        = true

[color]
  ui                = true

[branch]
  # automatically link new branch to start-point branch (upstream)
  autosetupmerge    = true

[push]
  # Ensure that when you `git push` only the current branch is pushed rather than all branches (why is this not the default?)
  default           = current

[rerere]
  # Reuse recorded resolution of conflicted merges:
  # - http://shop.oreilly.com/product/0636920024774.do
  # - http://git-scm.com/2010/03/08/rerere.html
  enabled           = true

[merge]
  # see: https://git-scm.com/docs/git-merge
  conflictstyle     = diff3

  tool              = Kaleidoscope

[mergetool]
  keepTemporaries   = false

  keepBackup        = false

  prompt            = false

[mergetool "Kaleidoscope"]
  cmd               = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot

  trustExitCode     = true

[diff]
  tool              = Kaleidoscope

[difftool]
  prompt            = false

[difftool "Kaleidoscope"]
  cmd               = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[alias]
  # locate commit where a particular file was introduced
  added-file        = log --diff-filter=A --

  # list aliases
  aliases           = !git config --get-regexp '^alias.' | awk -F '[. ]' '{ print $2 }'

  # list git bins (lots of gems in there)
  bin               = !find $(git --exec-path) -type f | xargs basename | $(git config --get core.pager)

  # stage and commit given file
  checkin           = ![[ -z "$*" ]] && echo 'No file name was provided.' 1>&2 && exit 1 || git stage "$*" && git commit $!

  # diff current HEAD against master (this is what you want 90% of the time if you work in topic branches)
  compare           = diff HEAD..master --

  # list "conflicted" files (files containing conflict markers)
  conflicted        = grep --name-only --full-name '<<<<<<< HEAD'

  # list contributor stats for this repo
  contributors      = !git shortlog -n -s --no-merges $@ | cat - && echo && echo total $(git rev-list --count HEAD)

  # count modified files
  count-modified    = !echo $(git status --porcelain | grep -E '[^MARC]' | wc -l | awk '{ print $1 }') files modified

  # give someone else credit for a commit
  credit-author     = !echo '\nPending Commit:\n% git commit -am \"commit message\" --author \"Full Name <name@domain.tld>\"\n\nExisting Commit:\n% git commit --amend --author \"Full Name <name@domain.tld>\" -C HEAD\n'

  # consider a topic branch "finished" by deleting it locally and from your "origin" remote
  finish            = ![[ -z "$*" ]] && echo 'No branch was provided.' 1>&2 && exit 1 || git branch -d "$*" && git push origin --delete $!

  # edit your global config
  edit-config       = config --global -e

  # open files with conflict markers in your configured editor
  edit-conflicted   = !$EDITOR $(git grep --name-only --full-name '<<<<<<< HEAD' | awk '{print $NF}')

  # open modified files in your configured editor
  edit-modified     = !$EDITOR $(git status --porcelain | grep -E '[^MARC]' | awk '{print $NF}')

  # group grep search results (much more readable this way)
  grep-group        = grep --break --heading --line-number

  # commit history in graph format: abbreviated commits ID, one commit per line + with commit references (like git log --decorate)
  history           = log --graph --decorate --pretty=oneline --abbrev-commit

  # show ignored project files
  ignored           = !git status --ignored | grep -F 'Ignored files:' -A100

  # navigate to the JIRA story corresponding to the current branch (`git set-jira-domain your domain` to configure 
  jira-branch       = !echo 'To set your Jira Server Url: `git config --replace-all jira.serverurl http://...`' && git web--browse $(git config --get jira.serverurl)/browse/$(git name-rev --name-only HEAD)

  # list commits not yet pushed to remote
  local             = log --branches --not --remotes

  # show commits where my github user name is the author
  log-github-user   = !git log --author="$(git config --get github.user)"

  # markdown-friendly list of topic/branch related logs (great for Github pull requests)
  markdown          = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F"$BN: " '{print \"-\", $NF}' | uniq

  # show branches that have been merged into current (HEAD) branch
  merged            = !git fetch --all --prune && git branch --all --merged HEAD

  # show branches that have not been merged into current (HEAD) branch
  not-merged        = !git fetch --all --prune && git branch --all --no-merged HEAD

  # navigate to help on installing `git-credential-osxkeychain`
  osxkeychain-help  = web--browse http://git.io/dz-m6w

  # terminal tab reflecting your current git project name (https://gist.github.com/3874729)
  project-name      = config --replace-all project.info.name

  # stage file after resolving a merge conflict (like svn, hg)
  resolve           = stage --

  # fetch and rebase from upstream/master then push current branch to origin
  sync              = !git pull --no-rebase --ff upstream master && git push -u origin +HEAD

  # same as `git sync` but also rebases
  sync-rebase       = !git pull --rebase --ff upstream master && git push -u origin +HEAD

  # decorated graph view of one liner summarized commits from all branches. (inspired by git-extras)
  tree              = log --all --graph --decorate --oneline --simplify-by-decoration

  # undo local changes
  undo              = checkout --

  # remove staged changes from the index: (1) provide file name/pattern (2) otherwise, removes all
  unstage           = reset HEAD --

  # list untracked files
  untracked         = ls-files -o

############################################################
# changelog
#
# **2013.08.31**
# - add `conflicted` and `edit-conflicted`.
#
# **2013.08.13**
# - add `grep-group` to group grep search results.
# - default `git grep` to show line number.
#
# **2013.08.06**
# - add `jira-branch` to jump to a JIRA story of the same
#   name as the current branch.
#
# **2013.08.02**
# - add `count-modified` to list # of modified files.
#
## **2013.08.01**
# - add `osxkeychain-help` which navigates to help page
#   detailing installation of 'git-credential-osxkeychain'
#
# **2013.07.19**
# - add `--prune` to `merged` and `not-merged` aliases
#
# **2013.07.18**
# - add `edit-modified` alias
#
# **2013.06.10**
# - add documentation link for `osxkeychain`
# - remove `start` alias
#
# **2013.06.10**
# - add `git start` alias as a complement to `git finish`
############################################################