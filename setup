################################################################################
# Install dotfiles
# Wil Moore III <wil.moore@wilmoore.com>
# 
# Tasks: 
#
#  - clone dotfiles repo
#  - locate and link linkable files, make backups for existing, non-link files
#  - setup prezto (assume prezto configuration files are linked with dotfiles)
# 
# This is meant to be invoked via:
# bash < <(curl -s https://raw.github.com/wilmoore/dotfiles/master/setup)
################################################################################

set -e

################################################################################
# configuration
################################################################################

DOTFILES_CLONE_URL='https://github.com/wilmoore/dotfiles.git'
DOTFILES_HOME_PATH="$HOME/.dotfiles"
TARGET="$DOTFILES_HOME_PATH/active"
BACKUP="$HOME/.backup/dotfiles"

################################################################################
# output functions
################################################################################

say () {
  printf "\r [ \033[00;34m..\033[0m ] $1\n"
}

ask () {
  printf "\r [ \033[0;33m??\033[0m ] $1\n"
}

pass () {
  printf "\r\033[2K [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

################################################################################
# helper functions
################################################################################

#
# does file exist as a real file (non-link)
#

real_file_exists () {
  [[ -f "$1" && ! -L "$1" ]] && return 0
  return 1
}

#
# list linkable dotfiles
#

linkable_dotfiles () {
  find "$1" -maxdepth 1 -mindepth 1 \
    ! -name '*.d'   \
    ! -name 'setup' \
    ! -name '*.swp' \
    ! -name '*.md'
}

################################################################################
# clone dotfiles repo
################################################################################

if [[ -d $TARGET ]]; then
  say "dotfiles directory exists; preparing to update [$TARGET]"

  cd $TARGET || fail "command failed: [cd $TARGET]...aborting!"
  
  say "current directory: $(pwd)"
  
  git pull 2>/dev/null || fail "command failed: [git pull]...aborting!"
  
  say "dotfiles repository successfully updated"
else
  git clone --recursive $DOTFILES_CLONE_URL $DOTFILES_HOME_PATH || fail "unable to clone dotfiles"
  say "dotfiles repository successfully cloned"
fi

################################################################################
# locate and link linkable files, make backups for existing, non-link files
################################################################################

for rcfile in $(linkable_dotfiles $TARGET); do
  mkdir -p $BACKUP

  linkpath="$HOME/$(basename $rcfile)"
  backpath="$BACKUP/$(basename $rcfile)-$(date '+%Y%m%d%H%M%S')"

  if real_file_exists "$linkpath"; then
    say "REAL FILE EXISTS: ($linkpath) -- creating backup file ($backpath)."
    cp "$linkpath" "$backpath"
  fi

  ln -fs "$rcfile" "$linkpath" && say "created link: ($linkpath)"
done

################################################################################
# setup prezto (assume prezto configuration files are linked with dotfiles)
#
# Links:
# 
#  - http://blog.jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html
#  - https://github.com/sorin-ionescu/prezto
################################################################################

say "Preparing to install Prezto"

if [[ -d "$HOME/.zprezto" ]]; then
  say "directory: ("$HOME/.zprezto") exists; skipping clone"
else
  git clone --recursive https://github.com/sorin-ionescu/prezto.git "$HOME/.zprezto" 2>/dev/null || fail "Failed to clone Prezto...aborting!"
fi

say "Preparing to update Prezto"

cd "$HOME/.zprezto"
git pull 2>/dev/null || fail "failed to update $(pwd)"

pass "Prezto Installed Successfully"

################################################################################
# set default shell to "Zsh"
################################################################################

DEFAULT_SHELL=zsh
DEFAULT_SHELL_PATH=$(command -v $DEFAULT_SHELL)

# OSX specific (todo: make this less osx specific)
CURRENT_SHELL_PATH=$(dscl localhost -read /Local/Default/Users/$USER shell | awk '{ print $NF }')

say "Preparing to set set default shell to $DEFAULT_SHELL"

[[ -e $DEFAULT_SHELL_PATH ]] || fail "$DEFAULT_SHELL does not seem to be available...aborting!"

if [[ $CURRENT_SHELL_PATH == $DEFAULT_SHELL_PATH ]]; then
  pass "Current shell is already set to ($DEFAULT_SHELL_PATH)...nothing to do!"
else
  chsh -s $DEFAULT_SHELL_PATH  || fail "Unable to set shell to $DEFAULT_SHELL_PATH"
fi

################################################################################
# Ensure proper permissions for ssh files and folders.
################################################################################

SSH_PATH=$HOME/.ssh

say "Preparing $SSH_PATH"

if [[ ! -d $SSH_PATH ]]; then
  mkdir -p $SSH_PATH || fail "Unable to create directory ($SSH_PATH)...aborting!"
fi

say "Setting permissions on ($SSH_PATH)"

chmod 700 $SSH_PATH    || fail "command failed: chmod 700 $SSH_PATH"
touch $SSH_PATH/config || fail "comamnd failed: touch $SSH_PATH/config"
chmod 600 $SSH_PATH/*  || fail "comamnd failed: chmod 600 $SSH_PATH/*"

################################################################################
# fin
################################################################################

pass "dotfile installation completed successfully."

